/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { MockKyberNetwork } from "./MockKyberNetwork";

export class MockKyberNetworkFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<MockKyberNetwork> {
    return super.deploy() as Promise<MockKyberNetwork>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): MockKyberNetwork {
    return super.attach(address) as MockKyberNetwork;
  }
  connect(signer: Signer): MockKyberNetworkFactory {
    return super.connect(signer) as MockKyberNetworkFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockKyberNetwork {
    return new Contract(address, _abi, signerOrProvider) as MockKyberNetwork;
  }
}

const _abi = [
  {
    inputs: [],
    name: "REVERT_HINT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "src",
        type: "address"
      },
      {
        internalType: "contract ERC20",
        name: "dest",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "srcAmount",
        type: "uint256"
      }
    ],
    name: "findBestRate",
    outputs: [
      {
        internalType: "uint256",
        name: "obsolete",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "src",
        type: "address"
      },
      {
        internalType: "contract ERC20",
        name: "dest",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "srcAmount",
        type: "uint256"
      }
    ],
    name: "findBestRateOnlyPermission",
    outputs: [
      {
        internalType: "uint256",
        name: "obsolete",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "src",
        type: "address"
      },
      {
        internalType: "contract ERC20",
        name: "dest",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "srcQty",
        type: "uint256"
      }
    ],
    name: "getExpectedRate",
    outputs: [
      {
        internalType: "uint256",
        name: "expectedRate",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "slippageRate",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "pairRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "src",
        type: "address"
      },
      {
        internalType: "contract ERC20",
        name: "dest",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "srcAmount",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "usePermissionLess",
        type: "bool"
      }
    ],
    name: "searchBestRate",
    outputs: [
      {
        internalType: "uint256",
        name: "obsolete",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "src",
        type: "address"
      },
      {
        internalType: "contract ERC20",
        name: "dest",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256"
      }
    ],
    name: "setPairRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "src",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "srcAmount",
        type: "uint256"
      },
      {
        internalType: "contract ERC20",
        name: "dest",
        type: "address"
      },
      {
        internalType: "address payable",
        name: "destAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "maxDestAmount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "minConversionRate",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "walletId",
        type: "address"
      }
    ],
    name: "trade",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d34806100206000396000f3fe60806040526004361061007f5760003560e01c8063b8388aca1161004e578063b8388aca14610284578063c5e64bbc1461031a578063cb3c28c714610369578063f9819fe91461043f57610086565b80630c235d961461008b5780631dc1f78d1461012d57806340d41498146101c3578063809a9e55146101ee57610086565b3661008657005b600080fd5b34801561009757600080fd5b50610110600480360360808110156100ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035151590602001909291905050506104ba565b604051808381526020018281526020019250505060405180910390f35b34801561013957600080fd5b506101a66004803603606081101561015057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610571565b604051808381526020018281526020019250505060405180910390f35b3480156101cf57600080fd5b506101d8610638565b6040518082815260200191505060405180910390f35b3480156101fa57600080fd5b506102676004803603606081101561021157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610640565b604051808381526020018281526020019250505060405180910390f35b34801561029057600080fd5b506102fd600480360360608110156102a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106fc565b604051808381526020018281526020019250505060405180910390f35b34801561032657600080fd5b506103536004803603602081101561033d57600080fd5b81019080803590602001909291905050506107c3565b6040518082815260200191505060405180910390f35b610429600480360360e081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107db565b6040518082815260200191505060405180910390f35b34801561044b57600080fd5b506104b86004803603606081101561046257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c56565b005b6000806000808787604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012081526020019081526020016000205490506000818191509150915094509492505050565b60008063075bc37183141561058557600080fd5b6000808686604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019250505060405160208183030381529060405280519060200120815260200190815260200160002054905060008181915091509150935093915050565b63075bc37181565b6000806000808686604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001208152602001908152602001600020549150606460618302816106f157fe5b049050935093915050565b60008063075bc37183141561071057600080fd5b6000808686604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014019250505060405160208183030381529060405280519060200120815260200190815260200160002054905060008181915091509150935093915050565b60006020528060005260406000206000915090505481565b6000806000808a89604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001208152602001908152602001600020549050600081116108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f524154455f5a45524f000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b83811161096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f524154455f544f4f5f4c4f57000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000670de0b6b3a7640000828a028161097f57fe5b0490506000899050868211156109a95786915082670de0b6b3a76400008802816109a557fe5b0490505b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505050506040513d6020811015610a8e57600080fd5b8101908080519060200190929190505050610b11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5452414e534645525f4641494c4544000000000000000000000000000000000081525060200191505060405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610ba5578773ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610b9f573d6000803e3d6000fd5b50610c45565b8873ffffffffffffffffffffffffffffffffffffffff166340c10f1989846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610c2c57600080fd5b505af1158015610c40573d6000803e3d6000fd5b505050505b819350505050979650505050505050565b806000808585604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012081526020019081526020016000208190555050505056fea26469706673582212204f2c17049fb7e1af4104252cbe2f68b99a8df17b1e815b79c11ec854bc01c3a564736f6c63430006040033";
