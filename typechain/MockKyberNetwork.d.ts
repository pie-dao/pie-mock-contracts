/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MockKyberNetworkInterface extends Interface {
  functions: {
    REVERT_HINT: TypedFunctionDescription<{ encode([]: []): string }>;

    findBestRate: TypedFunctionDescription<{
      encode([src, dest, srcAmount]: [string, string, BigNumberish]): string;
    }>;

    findBestRateOnlyPermission: TypedFunctionDescription<{
      encode([src, dest, srcAmount]: [string, string, BigNumberish]): string;
    }>;

    getExpectedRate: TypedFunctionDescription<{
      encode([src, dest, srcQty]: [string, string, BigNumberish]): string;
    }>;

    pairRate: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    searchBestRate: TypedFunctionDescription<{
      encode([src, dest, srcAmount, usePermissionLess]: [
        string,
        string,
        BigNumberish,
        boolean
      ]): string;
    }>;

    setPairRate: TypedFunctionDescription<{
      encode([src, dest, rate]: [string, string, BigNumberish]): string;
    }>;

    trade: TypedFunctionDescription<{
      encode([
        src,
        srcAmount,
        dest,
        destAddress,
        maxDestAmount,
        minConversionRate,
        walletId
      ]: [
        string,
        BigNumberish,
        string,
        string,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;
  };

  events: {};
}

export class MockKyberNetwork extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockKyberNetwork;
  attach(addressOrName: string): MockKyberNetwork;
  deployed(): Promise<MockKyberNetwork>;

  on(event: EventFilter | string, listener: Listener): MockKyberNetwork;
  once(event: EventFilter | string, listener: Listener): MockKyberNetwork;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockKyberNetwork;
  removeAllListeners(eventName: EventFilter | string): MockKyberNetwork;
  removeListener(eventName: any, listener: Listener): MockKyberNetwork;

  interface: MockKyberNetworkInterface;

  functions: {
    REVERT_HINT(): Promise<BigNumber>;

    findBestRate(
      src: string,
      dest: string,
      srcAmount: BigNumberish
    ): Promise<{
      obsolete: BigNumber;
      rate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    findBestRateOnlyPermission(
      src: string,
      dest: string,
      srcAmount: BigNumberish
    ): Promise<{
      obsolete: BigNumber;
      rate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish
    ): Promise<{
      expectedRate: BigNumber;
      slippageRate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    pairRate(arg0: Arrayish): Promise<BigNumber>;

    searchBestRate(
      src: string,
      dest: string,
      srcAmount: BigNumberish,
      usePermissionLess: boolean
    ): Promise<{
      obsolete: BigNumber;
      rate: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    setPairRate(
      src: string,
      dest: string,
      rate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  REVERT_HINT(): Promise<BigNumber>;

  findBestRate(
    src: string,
    dest: string,
    srcAmount: BigNumberish
  ): Promise<{
    obsolete: BigNumber;
    rate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  findBestRateOnlyPermission(
    src: string,
    dest: string,
    srcAmount: BigNumberish
  ): Promise<{
    obsolete: BigNumber;
    rate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getExpectedRate(
    src: string,
    dest: string,
    srcQty: BigNumberish
  ): Promise<{
    expectedRate: BigNumber;
    slippageRate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  pairRate(arg0: Arrayish): Promise<BigNumber>;

  searchBestRate(
    src: string,
    dest: string,
    srcAmount: BigNumberish,
    usePermissionLess: boolean
  ): Promise<{
    obsolete: BigNumber;
    rate: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  setPairRate(
    src: string,
    dest: string,
    rate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  trade(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    REVERT_HINT(): Promise<BigNumber>;

    findBestRate(
      src: string,
      dest: string,
      srcAmount: BigNumberish
    ): Promise<BigNumber>;

    findBestRateOnlyPermission(
      src: string,
      dest: string,
      srcAmount: BigNumberish
    ): Promise<BigNumber>;

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish
    ): Promise<BigNumber>;

    pairRate(arg0: Arrayish): Promise<BigNumber>;

    searchBestRate(
      src: string,
      dest: string,
      srcAmount: BigNumberish,
      usePermissionLess: boolean
    ): Promise<BigNumber>;

    setPairRate(
      src: string,
      dest: string,
      rate: BigNumberish
    ): Promise<BigNumber>;

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string
    ): Promise<BigNumber>;
  };
}
